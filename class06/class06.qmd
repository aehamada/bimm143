---
title: "class06"
author: "Anjali Hamada"
date: "01/28/2024"
format: pdf
---

Please note that the classwork walkthrough is shown at the bottom of this document. The work just below is Q1-Q5.

## Q1

Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” \[3pts\]

```{r}
#' Calculate the average score for a vector of student scores dropping the lowest score. Missing values will be treated as zero.
#'
#' @param x A numeric vector of homework scores
#'
#' @return Average score
#' @export
#'
#' @examples
#'  student <- c(100, NA, 90, 97)
#'  grade(student)
#'  
grade <- function(x){
  # mask NA with zero
  # treat missing values as zero
  x[is.na(x)] <- 0
  # exclude lowest score from mean
  mean(x[-which.min(x)])
}
```
```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)
```
## Q2

Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? \[3pts\]
```{r}
results <- apply(gradebook, 1, grade)
#sort(results, decreasing = TRUE) 
# OR you can do...
which.max(results)
```

## Q3

From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? \[2pts\]

```{r}
avg.scores <- apply(gradebook, 2, mean, na.rm=TRUE)
avg.scores
which.min(avg.scores)
```

```{r}
med.scores <- apply(gradebook, 2, median, na.rm=TRUE)
med.scores
which.min(med.scores)
```

```{r}
boxplot(gradebook)
```

The median/boxplot shows that HW2 had the lowest scores, with over half the class scoring below any of the other assignments. This makes sense, since the mean can't take into account skewed distributions.

## Q4

Optional Extension: From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? \[1pt\]

```{r}
# Are the final results (i.e. average score for each student) correlated with the results (i.e. scores) for individual homeworks (the gradebook columns)?
masked.gradebook <- gradebook
masked.gradebook[is.na(masked.gradebook)] <- 0
cor(results, masked.gradebook$hw5)
apply(masked.gradebook, 2, cor, x=results)
```

HW5 had the highest correlation of 0.6325982.

## Q5

Make sure you save your Quarto document and can click the “Render” (or Rmarkdown ”Knit”) button to generate a PDF format report without errors. Finally, submit your PDF to gradescope. \[1pt\]

On it, boss!

## In-Class Work

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

```{r}
# straight forward mean()
# student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
mean(student1)
```

```{r}
# which element of the vector is lowest
which.min(student1)
```

```{r}
# returns everything but the 8th element of the vector
student1[-8]
```

```{r}
# first working snippet! calculates avg grade with lowest 
# score dropped
mean(student1[-which.min(student1)])
```

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
mean(student2, na.rm=TRUE)

student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
mean(student3, na.rm=TRUE)
# na.rm works but both s2 and s3 end with As!
```

```{r}
# replace all NA values with 0
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
x <- student2

# is.na(x)
# which(is.na(x))
# x[which(is.na(x))]
# mean(x[-which(is.na(x))])
# all useful solutions, but we like the one below better
x[is.na(x)] <- 0
x
mean(x)
```

```{r}
# final working snippet!
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
x <- student3
x[is.na(x)] <- 0
mean(x[-which.min(x)])
```

```{r}
# using Code > Extract Function to turn this into a function
gradeClass <- function(x){
  x[is.na(x)] <- 0
  mean(x[-which.min(x)])
}
```

```{r}
gradeClass(student1)
gradeClass(student2)
gradeClass(student3)
```
