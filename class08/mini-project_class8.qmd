---
title: "mini-project class 8"
format: pdf
---

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)

# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]

# Create diagnosis vector for later 
diagnosis <- factor(wisc.df[,1]) 
```
## Q1. How many observations are in this dataset?
```{r}
nrow(wisc.data)
```
569 observations (rows).
## Q2. How many of the observations have a malignant diagnosis?
```{r}
length(grep("M", diagnosis))
```
212 observations. 
## Q3. How many variables/features in the data are suffixed with _mean?
```{r}
table(endsWith(colnames(wisc.data), "_mean"))
```
10 variables. 

```{r}
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data,2,sd)
```
Some values differ by several orders of 10. Scaling is needed.
```{r}
scaledData <- scale(wisc.data)

# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(scaledData)

# Look at summary of results
summary(wisc.pr)
```
## Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?
44.27% of the variance is captured by PC1.

## Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
3-- PC1, PC2, and PC3. They describe 72.64% of the original variance. PC1 and PC2 only comprise 63.24%.

## Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
7-- PC1 through PC7. They comprise 91.01% of the original variance.

## Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?
```{r}
biplot(wisc.pr)
```
Yeah, this plot sucks. It's extremely difficult to read with all the labels and data overlapping.I would have no idea what I was looking at out of context.

```{r}
# Scatter plot observations by components 1 and 2
plot( wisc.pr$x , col = diagnosis , 
     xlab = "PC1", ylab = "PC2")
```
## Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
# Repeat for components 1 and 3
plot(wisc.pr$x[, 1], wisc.pr$x[,3], col = diagnosis, 
     xlab = "PC1", ylab = "PC3")
```
There's a really clear line of distinction between the red and black in PC1 vs. PC2, but against PC3 there starts to be a lot more overlap, with the red much more spread out underneath black. They're both still ugly though.

```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```
```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)

# Variance explained by each principal component: pve
pve <- pr.var / 30

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")

# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )

## OPTIONAL: factoextra package; ggplot based graph
#install.packages("factoextra")
#library(factoextra)
#fviz_eig(wisc.pr, addlabels = TRUE)
```

## Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?
```{r}
wisc.pr$rotation[,1]
```
 concave.points_mean = -0.26085376.
## Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?
5

```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)

data.dist <- dist(data.scaled)

wisc.hclust <- hclust(data.dist, method="complete")
```

## Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?
```{r}
plot(wisc.hclust)
abline(a=19, b=0, col="red", lty=2)
```
Between 18 and 19, closer to 19. About 18.7 (closest to 18.637) 

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
table(wisc.hclust.clusters, diagnosis)
```
## Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?
```{r}
wisc.hclust.clustersTemp <- cutree(wisc.hclust, k=7)
table(wisc.hclust.clustersTemp, diagnosis)
```
## Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.
```{r}
wisc.hclustTemp <- hclust(data.dist, method="average")
plot(wisc.hclustTemp)
abline(a=19, b=0, col="red", lty=2)
```
I prefer "average" because it allows for easy visualization of the relationships over cluster number-- going downwards in height, the graph extends with new clusters and can be read left to right. It's intuitive.

```{r}
wisc.km <- kmeans(wisc.data, centers=2, nstart= 20)
table(wisc.km$cluster, diagnosis)
table(wisc.hclust.clusters, wisc.km$cluster)
```

## Q14. How well does k-means separate the two diagnoses? How does it compare to your hclust results?

It does a much better job than just the hclust alone.

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)

table(grps, diagnosis)
plot(wisc.pr.hclust)
plot(wisc.pr$x[,1:2], col=grps)
plot(wisc.pr$x[,1:2], col=diagnosis)

g <- as.factor(grps)
levels(g)
g <- relevel(g,2)
levels(g)
# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```
```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
wisc.pr.hclust <- hclust(dist(wisc.pr$x[,1:7]), method="ward.D2")
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
```

## Q15. How well does the newly created model with four clusters separate out the two diagnoses?
```{r}
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
```
Very well!! We still have some to go, though. The malignant cluster could be better separated.

## Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.
```{r}
table(wisc.km$cluster, diagnosis)
table(wisc.hclust.clusters, diagnosis)
```
I prefer wisc.km$cluster. It has the best separation for the malignant and benign clusters.

## Q17. Which of your analysis procedures resulted in a clustering model with the best specificity? How about sensitivity?
```{r}
#model 1: wisc.km$cluster
sens1 <- 130/(130+82) 
sens1
spec1 <- 356/(356+1)
spec1
# model 2: wisc.hclust.clusters
sens2 <- (165+5+2)/((165+5+2)+40)
sens2
spec2 <- 343/(343+40)
spec2
```
wisc.km$cluster produces the highest specificity, but wisc.hclust.clusters has the higher sensititivity.

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc

plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```
I don't know why it's labelled itself that way.

## Q18. Which of these new patients should we prioritize for follow up based on your results?
Patient group 2, with the more extreme PC values,